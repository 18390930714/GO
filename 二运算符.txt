#关系运算符

fmt.Println(a == b) //go语言是强类型, 相同类型的变量才能比较
fmt.Println(a != b) //不等于
fmt.Println(a >= b ) //大于等于
fmt.Println(a > b)  //大于
fmt.Println(a <= b) //小于等于
fmt.Println(a < b) //小于

#逻辑运算

与 或 非

age := 22
if age > 18 && age < 60 { //与运算 &&
   fmt.Println("上班族")
} else {
   fmt.Println("不用上班")
}


age > 18 || age < 60  //或运算

isMarried := false
fmt.Println(!isMarried) // 非运算 ! 取反

#位运算
 // 位运算用于二进制
1. 按位与: 符号：& , 参与运算的两位数各对应的二进制位相与(两位都为1才为1)
fmt.Println(5 & 2) // 101 与 010 等于 000
2. 按位或：符号：| , 参与运算的两数各对应的二进制位相或 (两位有一个为1就为1)
fmt.Println(5 | 2) // 101 或 010 等于 111
3. 相异或: 符号：^ , 参与运算的两数各对应的二进制位相异或 (两位不一样则为1)
fmt.Println(5 ^ 2) // 101 异或 010 等于 111
4. 左移：符号：<<
5. 右移：符号：>>

#赋值运算符
1. = , 赋值
2. +=, 相加再赋值  x += 1 // x = x + 1
3. -=, 相减再赋值  x -= 1 // x = x - 1
4. *=, 相乘再赋值  x *= 2 // x = x * 2
5. /=, 相除再赋值  x /= 2 // x = x / 2
6. %/, 相余再赋值  x %= 2 // x = x % 2
7. <<=, 左移后赋值 x <<= 2 // x = x << 2
8. >>=, 右移后赋值 x >>= 2 // x = x >> 2
9. &=, 按位与后赋值 x &= 2 // x = x & 2
10.|=, 按位或后赋值 x |= 3 // x = x | 3
11. ^=, 按位异或后赋值 x ^= 4 // x = x ^ 4
